---
description: 
globs: 
alwaysApply: false
---
# Estándares de Código - App de Recetas

## Convenciones de Nomenclatura

### Archivos y Directorios
- Componentes: `PascalCase.jsx` (ej: `RecipeCard.jsx`)
- Hooks: `camelCase.js` con prefijo `use` (ej: `useRecipes.js`)
- Servicios: `camelCase.js` (ej: `themealdb.js`)
- Páginas: `PascalCase.jsx` (ej: `Index.jsx`, `Favorites.jsx`)

### Variables y Funciones
- Variables: `camelCase`
- Funciones: `camelCase`
- Constantes: `UPPER_SNAKE_CASE`
- Componentes: `PascalCase`

## Estructura de Componentes

### Orden de Imports
```jsx
// 1. React imports
import React, { useState, useEffect } from 'react';

// 2. Third-party libraries
import { Card, Button } from '@mui/material';
import axios from 'axios';

// 3. Internal imports
import { useRecipeStore } from '../store/recipeStore';
import { translateText } from '../services/deepl';

// 4. Relative imports
import './RecipeCard.css';
```

### Estructura de Componente
```jsx
const ComponentName = ({ prop1, prop2, ...props }) => {
  // 1. Hooks de estado
  const [localState, setLocalState] = useState();
  
  // 2. Store/Context
  const { globalState, actions } = useStore();
  
  // 3. Custom hooks
  const customData = useCustomHook();
  
  // 4. Side effects
  useEffect(() => {
    // effects
  }, [dependencies]);
  
  // 5. Event handlers
  const handleEvent = () => {
    // handler logic
  };
  
  // 6. Render
  return (
    <div>
      {/* JSX */}
    </div>
  );
};

export default ComponentName;
```

## Error Handling

### API Calls
- Siempre usar try-catch para llamadas async
- Mostrar mensajes de error amigables al usuario
- Logging de errores para debugging

### Validación de Props
- Default props para valores opcionales

## Performance

### Optimizaciones
- Usar `React.memo` para componentes que no cambian frecuentemente
- `useMemo` para cálculos costosos
- `useCallback` para funciones que se pasan como props
- Lazy loading para componentes grandes

### Bundle Optimization
- Code splitting por rutas
- Lazy imports para librerías grandes
- Optimización de imágenes

## Accessibility

### Principios Básicos
- Alt text para todas las imágenes
- Labels apropiados para form controls
- Keyboard navigation
- Color contrast adecuado
- ARIA attributes donde sea necesario

